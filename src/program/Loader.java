/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package program;

import com.sun.jna.NativeLibrary;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.Timer;
import uk.co.caprica.vlcj.binding.support.runtime.RuntimeUtil;
import uk.co.caprica.vlcj.media.Media;
import uk.co.caprica.vlcj.media.MediaEventListener;
import uk.co.caprica.vlcj.media.MediaParsedStatus;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.Meta;
import uk.co.caprica.vlcj.media.Picture;
import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent;



/**
 *
 * @author Szab√≥Roland(SZOFT_20
 */
public class Loader extends javax.swing.JPanel implements MediaEventListener{

    private EmbeddedMediaPlayerComponent mediaPlayerComponent = new EmbeddedMediaPlayerComponent();
    /**
     * Creates new form Loader
     */
    
     // <editor-fold defaultstate="collapsed" desc="Event implmentation"> 
    private static Set<EI.loadingListener> listeners = new HashSet();
    public void addListener(EI.loadingListener listener) {
        listeners.add(listener);
    }
    public void removeListener(EI.loadingListener listener) {
        listeners.remove(listener);
    }
    // </editor-fold>
    
    public Loader() {
        initComponents();
        mediaPlayerComponent.mediaPlayer().media().prepare("VW1.9TDIEngineSound.mp4");
        //NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), "C:\\Program Files\\VideoLAN\\VLC\\");
        //System.setProperty("VLC_PLUGIN_PATH",  "C:\\Program Files\\VideoLAN\\VLC\\plugins");
        mediaPlayerComponent.setBounds(0, 0, 595, 274);
        mediaPlayerComponent.mediaPlayer().media().events().addMediaEventListener(this);
        jPanel1.add(mediaPlayerComponent);
        //mediaPlayerComponent.mediaPlayer().status().time();
       /* System.out.println(mediaPlayerComponent.mediaPlayer().status().time());
        System.out.println(mediaPlayerComponent.mediaPlayer().status().length());
        System.out.println(mediaPlayerComponent.mediaPlayer().status().position());
        System.out.println(mediaPlayerComponent.mediaPlayer().status().rate());
        //System.out.println(mediaPlayerComponent.mediaPlayer().status().state());*/
        
        jProgressBar1.setMinimum(0);
        
        
        
        //mediaPlayerComponent.mediaPlayer().status().position();
        //La_video.setText("<html><embed type=\"video/webm\" src=\"VW1.9TDIEngineSound.mp4\" width=\"400\" height=\"300\"></html>");
        
        
    }
    
    public void play(){
        mediaPlayerComponent.mediaPlayer().media().play("VW1.9TDIEngineSound.mp4");
       
        jProgressBar1.setMaximum((int)mediaPlayerComponent.mediaPlayer().status().length());
        System.out.println(mediaPlayerComponent.mediaPlayer().status());
        Timer timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jProgressBar1.setValue((int)mediaPlayerComponent.mediaPlayer().status().position());
                if(!mediaPlayerComponent.mediaPlayer().status().isPlaying()){
                    mediaPlayerComponent.setVisible(false);
                    jPanel1.setVisible(false);
                    jProgressBar1.setVisible(false);
                    close();
                }
            }
        });
        timer.start();
    }
    
    private void close(){
        listeners.forEach(x -> x.stateEnd(this));  
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(649, 363));

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setMaximumSize(new java.awt.Dimension(649, 363));
        jPanel1.setMinimumSize(new java.awt.Dimension(649, 363));
        jPanel1.setPreferredSize(new java.awt.Dimension(649, 363));

        jProgressBar1.setBackground(new java.awt.Color(204, 204, 204));
        jProgressBar1.setForeground(new java.awt.Color(255, 153, 51));
        jProgressBar1.setMaximumSize(new java.awt.Dimension(649, 11));
        jProgressBar1.setMinimumSize(new java.awt.Dimension(573, 11));
        jProgressBar1.setOpaque(true);
        jProgressBar1.setPreferredSize(new java.awt.Dimension(573, 11));

        jLabel1.setText("LOADING...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mediaMetaChanged(Media media, Meta metaType) {
        jProgressBar1.setValue((int)media.stats().mtime());
        System.out.println(media.stats().mtime());       
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mediaSubItemAdded(Media media, MediaRef newChild) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mediaDurationChanged(Media media, long newDuration) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        jProgressBar1.setMaximum((int)newDuration);
        System.out.println(newDuration);
    }

    @Override
    public void mediaParsedChanged(Media media, MediaParsedStatus newStatus) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        System.out.println(newStatus.DONE);
    }

    @Override
    public void mediaSubItemTreeAdded(Media media, MediaRef item) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mediaThumbnailGenerated(Media media, Picture picture) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mediaAttachedThumbnailsFound(Media media, List<Picture> pictures) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
